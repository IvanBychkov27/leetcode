// https://leetcode.com/problems/simplify-path/
/*
71. Simplify Path

Учитывая строковый путь, который является абсолютным путем (начинающимся с косой черты '/') к файлу или
каталогу в файловой системе в стиле Unix, преобразуйте его в упрощенный канонический путь.

В файловой системе в стиле Unix точка '.' относится к текущему каталогу,
двойная точка '..' относится к каталогу на более высоком уровне, а любые несколько последовательных косых черт (например, '//')
рассматриваются как одна косая черта '/'.
Для этой проблемы любой другой формат периодов, такой как '...', обрабатывается как имена файлов / каталогов.

Канонический путь должен иметь следующий формат:

Путь начинается с одной косой черты '/'.
Любые два каталога разделяются одной косой чертой '/'.
Путь не заканчивается завершающим символом '/'.
Путь содержит только каталоги на пути от корневого каталога к целевому файлу или каталогу (т.е. без точки '.' или двойной точки '..')

Верните упрощенный канонический путь.

Выполнено:
Время выполнения: 4 мс, быстрее, чем 59.63% отправок в режиме онлайн.
Использование памяти: 3,2 МБ, менее 43.48% отправленных онлайн-заявок.

*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	//path := "/home/" // "/home"
	//path := "/../" // "/"
	//path := "/home//foo/" // "/home/foo"
	path := "/a/./b/../../c/" // "/c"
	//path := "/a//b////c/d//././/.." // "/a/b/c"
	res := simplifyPath(path)
	fmt.Printf("res: %q", res)
}

func simplifyPath(path string) string {
	const slash = "/"
	ds := strings.Split(path, slash)
	ps := make([]string, 0, len(ds))
	for _, d := range ds {
		if d == "" || d == "." {
			continue
		}
		if d == ".." {
			l := len(ps)
			if l > 0 {
				ps = ps[:l-1]
			}
			continue
		}
		ps = append(ps, d)
	}
	return slash + strings.Join(ps, slash)
}
