/*
Римские цифры представлены семью различными символами: I, V, X, L, C, D и M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

Например, 2 записывается как II римской цифрой, просто две единицы складываются вместе.
12 записывается как XII, то есть просто X + II.
Число 27 записывается как XXVII, то есть XX + V + II.

Римские цифры обычно пишутся слева направо от наибольшего к наименьшему. Однако цифра для четырех не является IIII.
Вместо этого число четыре записывается как IV. Поскольку единица стоит перед пятью, мы вычитаем ее, получая четыре.
Тот же принцип применим и к числу девять, которое записывается как IX. Существует шесть случаев, когда используется вычитание:

I м.б. помещен перед V (5) и X (10), чтобы сделать 4 и 9.
X м.б. помещен перед L (50) и C (100), чтобы сделать 40 и 90.
C м.б. помещен перед D (500) и M (1000), чтобы сделать 400 и 900.

Получив целое число, преобразуйте его в римскую цифру.

Решено:
Время выполнения: 4 мс, быстрее, чем 92,98 % отправленных онлайн-сообщений от целого числа до латинского.
Использование памяти: 3,4 МБ, менее 55,21 % отправленных онлайн-сообщений от целого числа до латинского.

*/

package main

import (
	"fmt"
)

func main() {
	num := 1994

	res := intToRoman(num)

	fmt.Println(num, "=", res)
}

func intToRoman(num int) string {
	if num > 3999 {
		return ""
	}
	sim := []string{"I", "V", "X", "L", "C", "D", "M"}
	res := ""
	i := -1
	for {
		i += 2
		d := num % 10
		num /= 10

		f := 0
		if d >= 5 {
			f = 1
		}

		s := ""
		if d == (4 + 5*f) {
			s = sim[i-1] + sim[i+f]
		} else {
			if f == 1 {
				s = sim[i]
			}
			for j := 0; j < (d - 5*f); j++ {
				s += sim[i-1]
			}
		}

		res = s + res

		if num == 0 {
			break
		}
	}

	return res
}
